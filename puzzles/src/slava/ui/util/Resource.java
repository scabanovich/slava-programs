package slava.ui.util;

import java.awt.*;
import javax.swing.*;
import java.awt.image.*;

public class Resource {
    private static byte[] bytes = {
    (byte)0x47, (byte)0x49, (byte)0x46, (byte)0x38, (byte)0x39, (byte)0x61, (byte)0x10, (byte)0x00, (byte)0x10, (byte)0x00, (byte)0xA2, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
    (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0x23, (byte)0x4B, (byte)0x1B, (byte)0xBC, (byte)0xE4, (byte)0xB4, (byte)0x6F, (byte)0xBC, (byte)0x43, (byte)0x5E, (byte)0x96, (byte)0x36, (byte)0xFF,
    (byte)0xFF, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x21, (byte)0xF9, (byte)0x04, (byte)0x01, (byte)0x00, (byte)0x00, (byte)0x06, (byte)0x00, (byte)0x2C, (byte)0x00, (byte)0x00,
    (byte)0x00, (byte)0x00, (byte)0x10, (byte)0x00, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x42, (byte)0x68, (byte)0xBA, (byte)0xDC, (byte)0x2D, (byte)0x0E, (byte)0xC6, (byte)0x01,
    (byte)0x98, (byte)0xA0, (byte)0x6F, (byte)0x8C, (byte)0x52, (byte)0xCD, (byte)0x25, (byte)0x44, (byte)0xE7, (byte)0x69, (byte)0x03, (byte)0xC1, (byte)0x7D, (byte)0x26, (byte)0xB7, (byte)0x08,
    (byte)0x05, (byte)0x51, (byte)0x16, (byte)0x65, (byte)0x2A, (byte)0x2A, (byte)0xAC, (byte)0x0B, (byte)0xCA, (byte)0x8E, (byte)0xD7, (byte)0xBE, (byte)0x6A, (byte)0x8E, (byte)0xBE, (byte)0xB3,
    (byte)0x55, (byte)0x6C, (byte)0x67, (byte)0x0A, (byte)0xA2, (byte)0x0A, (byte)0x48, (byte)0x5B, (byte)0x6F, (byte)0x04, (byte)0x42, (byte)0x02, (byte)0x6A, (byte)0xC0, (byte)0x15, (byte)0x4E,
    (byte)0xE7, (byte)0x32, (byte)0x2E, (byte)0x75, (byte)0x41, (byte)0x5A, (byte)0x24, (byte)0xC7, (byte)0x6D, (byte)0x24, (byte)0x00, (byte)0x00, (byte)0x3B };
    public static Image empty = Toolkit.getDefaultToolkit().createImage(bytes);

    public static ImageIcon getImage(String imageName) {
        try {
            java.net.URL url = Resource.class.getClassLoader().getResource(imageName);
            return (url != null) ? new ImageIcon(url) : new ImageIcon(empty);
        } catch (Exception e) {
            return new ImageIcon(empty);
        }
    }

  private static JPanel dummy = new JPanel();
  public static ImageIcon getEmptyIcon(int width, int height) {
      int[] px = new int[width * height];
      for (int i = 0; i < px.length; i++) px[i] = 0xffffff;
      ImageProducer ip = new MemoryImageSource(width, height, px, 0, width);
      return new ImageIcon(dummy.createImage(ip));
  }


}