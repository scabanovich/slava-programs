package slava.puzzle.sudoku.solver.variations;

import slava.puzzle.sudoku.solver.AbstractSudokuField;

public class KingsSudokuField extends AbstractSudokuField {
	static int[] lastLineIndex = { 2,11,20,29,38,47,56,59};

	static int[] spaces = {
              6,0,0,
	1,0,0,0,0,0,0,0,0,
	1,0,0,0,    2,  1,0,0,0,
    1,0,    2,0,0,  1,0,0,0,
  0,0,0,0,  1,0,0,    2,0,
  0,0,0,0,  1,    2,0,0,0,
	    3,0,0,0,0,0,0,0,0,
          4,0,0,
};

	int[] fakeIndices = {23,24,25,34,35,36};

	public KingsSudokuField() {
		init();
	}

	public int getColorCount() {
		return 9;
	}

	void init() {
		size = 60;
		regions = new int[][]{
			{ 1, 2, 3, 8, 9,10,11,12,17},
			{ 4, 5, 6, 7,13,14,15,16,23},
			{18,19,20,21,27,28,29,30,39},
		{24,25,26,35,36,37},
			{22,31,32,33,34,40,41,42,43},
			{38,45,46,47,48,54,55,56,57},
			{44,49,50,51,52,53,58,59,60},
			
			{ 4, 5, 6, 7, 8, 9,10,11,12},
			{13,14,15,16,17,18,19,20,21},
			{22,23,27,28,29,30},
			{31,32,33,34,38,39},
			{40,41,42,43,44,45,46,47,48},
			{49,50,51,52,53,54,55,56,57},

			{ 2, 3,11,12,18,19,28,29,39},
			{ 1, 9,10,17,27,38,47,48,57},
			{ 7, 8,45,46,55,56},
			{ 5, 6,15,16,53,54},
			{ 4,13,14,23,34,44,51,52,60},
			{22,32,33,42,43,49,50,58,59},
		
			{ 7, 6,15,14,23,22,32,31,40},
			{ 1, 2, 8, 9,16,33,34,41,42},
			{ 3,10,11,17,43,49},
			{12,18,44,51,50,58},
			{20,19,28,27,45,53,52,60,59},
			{21,29,30,38,39,46,47,54,55},

		};
		for (int i = 0; i < regions.length; i++) {
			for (int j = 0; j < regions[i].length; j++) {
				regions[i][j]--;
			}
		}
		buildPlaceToRegions();
	}

	void init_000() {
		size = 60;
		regions = new int[][]{
			{ 1, 2, 3, 8, 9,10,11,12,17},
			{ 4, 5, 6, 7,13,14,15,16,23},
			{18,19,20,21,27,28,29,30,39},
			{24,25,26,35,36,37},
			{22,31,32,33,34,40,41,42,43},
			{38,45,46,47,48,54,55,56,57},
			{44,49,50,51,52,53,58,59,60},
			
			{ 4, 5, 6, 7, 8, 9,10,11,12},
			{13,14,15,16,17,18,19,20,21},
			{22,23,24,25,26,27,28,29,30},
			{31,32,33,34,35,36,37,38,39},
			{40,41,42,43,44,45,46,47,48},
			{49,50,51,52,53,54,55,56,57},

			{ 2, 3,11,12,18,19,28,29,39},
			{ 1, 9,10,17,27,38,47,48,57},
			{ 7, 8,25,26,37,45,46,55,56},
			{ 5, 6,15,16,24,35,36,53,54},
			{ 4,13,14,23,34,44,51,52,60},
			{22,32,33,42,43,49,50,58,59},
		
			{ 7, 6,15,14,23,22,32,31,40},
			{ 1, 2, 8, 9,16,33,34,41,42},
			{ 3,10,11,17,24,25,35,43,49},
			{12,18,26,37,36,44,51,50,58},
			{20,19,28,27,45,53,52,60,59},
			{21,29,30,38,39,46,47,54,55},

		};
		for (int i = 0; i < regions.length; i++) {
			for (int j = 0; j < regions[i].length; j++) {
				regions[i][j]--;
			}
		}
		buildPlaceToRegions();
	}

	public String printSolution(int[] solution) {
		StringBuffer sb = new StringBuffer();
		int line = 0;
		for (int i = 0; i < size; i++) {
			int q = spaces[i];
			for (int k = 0; k < q; k++) sb.append(" .");
			char c = (isFake(i)) ? '*' :
				(solution[i] < 0) ? '+' :
					(solution[i] == 9) ? 'a' :
			         ("" + (solution[i] + 1)).charAt(0);
			sb.append(" " + c);
			if(i == lastLineIndex[line]) {
				sb.append("\n");
				line++;
			}
		}
		return sb.toString();
	}

	boolean isFake(int i) {
		for (int k = 0; k < fakeIndices.length; k++) if(fakeIndices[k] == i) return true;
		return false;
	}

}
