package slava.puzzle.sudoku.solver.variations;

import slava.puzzle.sudoku.solver.AbstractSudokuField;

/**
 *                1
 *             2     3
 *          4     5     6
 *       7     8     9     10
 *          11    12    13    14
 *       15    16    17    18
 *          19    20    21    22
 *       23    24    25    26
 *          27    28    29    30
 *       31    32    33    34
 *          35    36    37    38
 *       39    40    41    42
 *          43    44    45
 *             46    47
 *                48
 */
public class CubeSlicedSudokuField extends AbstractSudokuField {
	static int[] lastLineIndex = { 0, 2,5,9,13,17,21,25,29,33,37,41,44,46,47};
	
	public static int A = 1;
	public static int B = 2;
	public static int C = 3;
	public static int D = 4;
	public static int E = 5;
	public static int F = 6;

	static int[] spaces = {
		6,
		4,3,
		2,3,3,
		0,3,3,3,
		2,3,3,3,
		0,3,3,3,
		2,3,3,3,
		0,3,3,3,
		2,3,3,3,
		0,3,3,3,
		2,3,3,3,
		0,3,3,3,
		2,3,3,
		4,3,
		6,
	};

	public CubeSlicedSudokuField() {
		init(F);
	}

	public CubeSlicedSudokuField(int kind) {
		init(kind);
	}

	public int getColorCount() {
		return 8;
	}

	void init(int kind) {
		size = 48;
		if(kind == A) {
			setRegionsA();
		} else if(kind == B) {
			setRegionsB();
		} else if(kind == C) {
			setRegionsC();
		} else if(kind == D) {
			setRegionsD();
		} else if(kind == E) {
			setRegionsE();
		} else if(kind == F) {
			setRegionsF();
		} else {
			setRegionsF();
		}
		for (int i = 0; i < regions.length; i++) {
			for (int j = 0; j < regions[i].length; j++) {
				regions[i][j]--;
			}
		}
		buildPlaceToRegions();
	}

	void setRegionsA() {
		regions = new int[][]{
			{2, 4, 7, 8, 11, 15, 19, 23},
			{1, 5, 12, 16, 20, 24, 27, 31},
			{3, 9, 17, 21, 25, 29, 34, 38},
			{6, 10, 14, 13, 18, 22, 26, 30},
			{28, 32, 33, 35, 36, 37, 39, 42},
			{40, 41, 43, 44, 45, 46, 47, 48},

			{7, 4, 2, 1, 3, 6, 10, 14},
			{15, 11, 8, 5, 9, 13, 18, 22},
			{23, 19, 16, 12, 17, 21, 26, 30},
			{31, 27, 24, 20, 25, 29, 34, 38},

			{7, 15, 23, 31, 39, 43, 46, 48},
			{4, 11, 19, 27, 35, 40, 44, 47},
			{2, 8, 16, 24, 32, 36, 41, 45},
			{1, 5, 12, 20, 28, 33, 37, 42},

			{3, 9, 17, 25, 28, 32, 35, 39},
			{6, 13, 21, 29, 33, 36, 40, 43},
			{10, 18, 26, 34, 37,41, 44, 46},
			{14, 22, 30, 38, 42, 45, 47, 48},

		};
	}

	void setRegionsB() {
		regions = new int[][]{
				
				{1, 2, 3, 5, 9, 12, 17, 20},
				{4, 7, 11, 8, 15, 19, 16, 24},
				{6, 10, 14, 13, 21, 18, 22, 25},
				{23, 27, 31, 32, 35,39, 40, 43},
				{26, 30, 29, 34, 38, 37, 42, 45},
				{28, 33, 36, 41, 44, 46, 47, 48},

				{1, 3, 6, 10, 18, 26, 34, 42},
				{2, 5, 12, 20, 25, 29, 37, 45},
				{4, 8, 16, 24, 28, 33, 41, 47},
				{7, 15, 23, 31, 39, 43, 46, 48},

				{1, 2, 4, 11, 19, 27, 35, 39},
				{3, 9, 17, 20, 24, 32, 40, 43},
				{6, 13, 21, 25, 28, 36, 44, 46},
				{14, 22, 30, 38, 42, 45, 47, 48},

				{7, 11, 8, 5, 9, 13, 10, 14},
				{15, 19, 16, 12, 17, 21, 18, 22},
				{23, 27, 32, 36, 33, 29, 26, 30},
				{31, 35, 40, 44, 41, 37, 34, 38},
	
		};
	}

	
	void setRegionsC() {
		regions = new int[][]{
				
				{1, 2, 3, 5, 9, 12, 17, 20},
				{4, 8, 7, 11, 15, 16, 19, 23},
				{6, 10, 13, 14, 18, 21, 22, 26},
				{24, 28, 27, 32, 31, 35, 39, 43},
				{25, 29, 30, 33, 34, 37, 38, 42},
				{36, 40, 41, 44, 45, 46, 47, 48},

				{1, 3, 6, 13, 18, 26, 30, 38},
				{2, 5, 12, 17, 25, 29, 37, 42},
				{4, 11, 16, 24, 28, 36, 41, 47},
				{7, 15, 23, 27, 35, 40, 46, 48},

				{1, 2, 8, 11, 19, 23, 31, 39},
				{3, 9, 12, 20, 24, 32, 35, 43},
				{10, 13, 21, 25, 33, 36, 44, 46},
				{14, 22, 26, 34, 37, 45, 47, 48},

				{7, 4, 8, 5, 9, 6, 10, 14},
				{15, 19, 16, 20, 17, 21, 18, 22},
				{31, 27, 32, 28, 33, 29, 34, 30},
				{39, 43, 40, 44, 41, 45, 42, 38},

		};
	}
	
	void setRegionsD() {
		regions = new int[][]{
				{1, 2, 3, 5, 9, 12, 17, 20},
				{4, 8, 7, 11, 15, 16, 19, 23},
				{6, 10, 13, 14, 18, 21, 22, 26},
				{24, 27, 32, 31, 35, 39, 40, 43},
				{25, 29, 30, 34, 37, 38, 42, 45},
				{28, 33, 36, 41, 44, 46, 47, 48}, 

				{1, 3, 6, 10, 18, 26, 30, 38},
				{2, 5, 12, 20, 25, 29, 37, 45},
				{4, 8, 16, 24, 28, 33, 41, 47},
				{7, 15, 23, 27, 35, 43, 46, 48},

				{1, 2, 4, 11, 19, 23, 31, 39},
				{3, 9, 17, 20, 24, 32, 40, 43},
				{6, 13, 21, 25, 28, 36, 44, 46},
				{14, 22, 26, 34, 42, 45, 47, 48},

				{7, 11, 8, 5, 9, 13, 10, 14},
				{15, 19, 16, 12, 17, 21, 18, 22},
				{31, 27, 32, 36, 33, 29, 34, 30},
				{39, 35, 40, 44, 41, 37, 42, 38},

		};
	}
	
	
	void setRegionsE() {
		regions = new int[][]{
				
				{1, 2, 3, 5, 6, 8, 9, 12},
				{7, 4, 11, 15, 16, 19, 20, 24},
				{10, 14, 13, 17, 18, 21, 22, 25},
				{23, 27, 31, 32, 35, 39, 40, 43},
				{26, 29, 30, 34, 37, 38, 42, 45},
				{28, 33, 36, 41, 44, 46, 47, 48},

				{1, 3, 6, 13, 21, 26, 30, 38},
				{2, 5, 9, 17, 25, 29, 34, 42},
				{4, 11, 19, 24, 28, 36, 44, 47},
				{7, 15, 23, 27, 32, 40, 46, 48},

				{1, 2, 8, 16, 19, 23, 31, 39},
				{3, 5, 12, 20, 24, 27, 35, 43},
				{10, 18, 21, 25, 33, 41, 44, 46},
				{14, 22, 26, 29, 37, 45, 47, 48},

				{7, 4, 8, 12, 9, 6, 10, 14},
				{15, 11, 16,20, 17, 13, 18, 22},
				{31, 35, 32, 28, 33, 37, 34, 30},
				{39, 43, 40, 36, 41, 45, 42, 38},
								
		};
	}
	
	void setRegionsF() {
		regions = new int[][]{
	{1, 2, 3, 5, 8, 12, 9, 20},
	{6, 10, 14, 13, 17, 18, 21, 22},
	{4, 7, 11, 15, 16, 19, 23, 24},
	{27, 28, 31, 32, 35, 39, 40, 43},
	{25, 26, 29, 30, 34, 37, 38, 42},
	{33, 36, 41, 44, 45, 46, 47, 48},

	{1, 2, 8, 11, 19, 23, 31, 39},
	{3, 5, 12, 20, 24, 27, 35, 43},
	{10, 13, 21, 25, 33, 36, 44, 46},
	{14, 22, 26, 29, 37, 45, 47, 48},

	{1, 3, 6, 13, 18, 26, 30, 38},
	{2, 5, 9, 17, 25, 29, 34, 42},
	{4, 11, 16, 24, 28, 36, 41, 47},
	{7, 15, 23, 27, 32, 40, 46, 48},

	{7, 4, 8, 12, 9, 6, 10, 14},
	{15, 19, 16, 20, 17, 21, 18, 22},
	{31, 35, 32, 28, 33, 37, 34, 30},
	{39, 43, 40, 44, 41, 45, 42, 38},
	
		};
	}
	
	public String printSolution(int[] solution) {
		StringBuffer sb = new StringBuffer();
		int line = 0;
		for (int i = 0; i < size; i++) {
			int q = spaces[i];
			for (int k = 0; k < q; k++) sb.append(" .");
			char c = (isFake(i)) ? '*' :
				(solution[i] < 0) ? '+' :
					(solution[i] > 8) ? (char)(solution[i] + 88) :
			         ("" + (solution[i] + 1)).charAt(0);
			sb.append(" " + c);
			if(i == lastLineIndex[line]) {
				sb.append("\n");
				line++;
			}
		}
		return sb.toString();
	}

	boolean isFake(int i) {
		return false;
	}

}
