package ic2006_3;

import com.slava.common.RectangularField;
import com.slava.common.TwoDimField;

public class MarathonRunner {
	
	
	public static void main(String[] args) {
			MarathonStateGenerator g = new MarathonStateGenerator();
			TwoDimField f = new RectangularField();
			f.setSize(4, 4);
			MarathonSolver solver = new MarathonSolver();
			solver.setField(f);
		int maxScore = 25;
		solver.maxScore = maxScore;
		while(maxScore < 100) {
			solver.setState(g.generateRandomState());
			solver.solve();
			if(solver.maxScore > maxScore) {
				maxScore = solver.maxScore;
			}
		}
	}

}

/**
score=62 treeCount=2323
 8 - 6 /
 * 4 + 7
 2 * 3 -
 / 5 + 1

 4 6 3 1 3 7 4 6 7 3 1 7 6 4 2 5 3 7 4 6 3 5 3 7 6 4 7 1 5 2 3 4 6 8 4 3 1 5 2 4 7 1 3 1 5 2 8 4 3 5 2 4 2 3 7 1 3 2 5 3 6 4 2 5 3 7 1 5 3 4 2 3 1 5 2 8 6 3 5 4 7 1 5 4 3 1 5 4 8 6 3 2 4 6 4 3 1 3 2 4 8 6 7 3 4 6 4 3 5
4-6+3-1+3-7+4-6+7-3+1-7+6+4*2/5+3-7+4-6+3+5+3-7+6-4+7-1+5/2*3*4+6-8-4*3-1+5/2*4+7-1+3-1+5*2*8-4+3+5/2*4*2*3-7-1+3*2*5+3+6-4*2*5*3+7-1+5*3+4*2*3-1+5/2*8-6+3*5*4+7-1+5*4+3-1+5*4*8-6+3*2*4+6+4*3+1+3*2*4*8-6+7+3*4-6+4*3+5

score=56 treeCount=3201
 5 + 3 /
 - 8 * 1
 7 + 2 -
 / 6 * 4

 5 8 3 1 4 2 7 8 3 1 2 8 7 8 2 6 7 8 1 8 5 3 1 2 6 2 1 4 2 8 7 8 6 2 1 8 3 8 2 1 3 8 2 1 8 6 2 8 5 7 6 4 1 8 7 8 3 1 2 6 7 8 6 4 2 1 3 8 2 4 6 7 8 1 2 4 6 8 7 8 2 4 1 8 3 8 2 6 4 2 7 5 8 3 1 8 7 2 3 5 8 2 7
5-8+3/1-4*2+7-8+3/1*2+8-7-8*2+6+7-8*1*8-5+3/1-2+6*2*1-4*2+8-7-8+6*2-1*8+3+8+2-1*3+8+2-1*8+6*2+8-5-7+6*4-1*8-7+8+3/1*2*6+7-8+6*4*2-1*3*8+2-4*6+7-8*1-2*4*6+8-7+8*2-4-1*8+3+8*2+6*4-2+7-5+8*3/1*8+7+2*3+5+8*2+7

score=54 treeCount=6719
 1 + 6 -
 - 5 + 4
 3 * 2 /
 / 7 * 8

 1 5 4 2 4 6 1 3 2 6 4 2 3 2 4 6 4 2 5 1 6 4 2 5 3 2 6 4 6 5 3 1 6 2 3 1 6 4 2 3 5 4 6 4 5 2 5 1 6 5 3 2 5 6 1 5 2 6 2 3 5 2 3 1 5 3 7 3 5 6 2 3 1 5 2 3 5 6 4 5 3 1 6 2 3
1-5+4/2+4-6+1-3*2+6-4/2*3*2+4-6-4/2*5-1+6-4/2*5-3*2+6-4-6+5*3-1+6+2*3-1+6-4+2*3*5+4-6-4+5*2*5-1+6+5-3*2*5+6+1+5*2+6+2*3-5+2*3-1+5-3*7*3-5+6+2*3-1+5+2*3*5+6+4+5*3-1+6+2*3

score=50
 4 + 6 /
 - 8 * 3
 5 + 2 *
 / 7 - 1

 1 2 5 4 5 2 1 2 8 5 8 7 1 7 8 2 3 6 4 8 3 6 4 5 2 3 6 8 2 1 7 5 8 6 8 5 2 8 4 6 2 7 8 2 7 5 8 4 6 2 8 4 8 7 2 1 3 6 8 7 2 8 6 3 8 5 2 8 7 1 2 8 7 2 1 3 8 2 1 3 6 8 6 2 1 3 8 4 8 2 5 7 2 3 6 8 5
1-2+5-4-5+2*1-2+8-5-8+7-1-7+8*2*3/6+4+8*3/6+4-5+2*3/6*8*2*1-7+5-8+6+8-5+2+8-4+6*2-7+8*2-7+5+8-4+6*2+8-4+8+7-2-1*3*6+8+7-2+8*6/3*8-5+2*8+7-1*2*8+7+2-1*3*8+2-1*3*6+8+6*2-1*3*8+4+8*2+5+7-2*3*6+8+5

score=50 treeCount=41462
 4 + 2 /
 - 6 * 7
 1 + 3 /
 * 5 - 8

 3 5 6 4 1 3 5 1 6 2 4 6 3 5 1 6 1 4 2 6 3 5 3 6 1 4 6 5 6 4 2 6 3 5 3 6 1 3 2 4 2 3 5 3 6 2 6 4 1 5 3 2 6 5 1 5 3 6 2 3 5 3 2 4 1 5 6 3 2 4 2 3 5
3-5+6-4-1+3-5+1-6+2+4-6+3-5*1+6+1-4+2+6+3-5-3+6-1-4+6+5+6-4+2*6+3-5-3*6-1+3*2+4+2*3-5-3*6+2*6+4-1*5+3*2*6+5*1+5-3*6+2*3-5+3*2+4-1*5+6+3*2+4+2*3+5

score=47
 7 / 3 *
 / 1 + 4
 6 * 2 -
 - 8 + 5

 3 1 2 5 2 1 3 1 4 5 4 2 1 2 5 4 2 1 3 2 5 4 5 8 1 4 5 8 2 4 3 4 2 1 4 2 8 5 2 1 8 2 3 1 2 8 2 4 3 1 2 8 2 5 4 1 2 8 2 3 1 2 3 4 2 8 5 8 2 4
3/1+2-5-2*1/3/1+4-5-4+2*1+2+5-4-2*1+3+2+5-4-5+8*1+4-5+8+2-4+3*4-2*1+4-2+8+5-2+1*8+2+3/1*2+8*2-4+3+1*2+8*2+5-4+1*2+8*2+3/1*2+3*4-2*8+5+8*2-4

score=46
 7 - 4 -
 + 6 * 2
 8 + 5 /
 / 1 * 3

 5 2 4 6 2 4 7 6 4 2 4 6 1 5 6 7 6 5 1 5 2 4 6 8 1 8 6 7 6 8 1 8 7 6 4 5 1 8 7 4 6 8 7 6 8 5 8 6 4 2 5 6 8 7 4 2 5 8 6 5 1 5 8 7 6 8 1 5 6 2 5 6 7 6 5 4 6 7 8 1 5 2 6 8 7
5*2-4-6*2-4-7-6*4-2*4-6+1*5+6-7-6*5*1*5*2-4-6+8+1+8+6-7-6+8/1+8+7-6-4*5+1+8+7-4-6+8+7-6+8+5+8+6-4-2*5+6+8+7-4-2*5+8+6+5*1*5+8+7+6+8/1*5+6*2*5+6+7-6+5*4*6-7+8/1+5*2*6+8+7
*/